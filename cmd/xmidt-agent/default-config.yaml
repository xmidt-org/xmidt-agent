# SPDX-FileCopyrightText: 2023 Comcast Cable Communications Management, LLC
# SPDX-License-Identifier: Apache-2.0

xmidt_credentials:
  # if url is empty, there is no attempt at auth
  #url: http://localhost:6501/issue
  file_name: "credentials.msgpack"
  file_permissions: 0600
  refetch_percent:  90.0
  wait_until_fetched: 30s
  http_client:
    timeout: 20s
    transport:
      disable_keep_alives: true
      max_idle_conns: 1
    tls:
      insecure_skip_verify: true
      min_version: 771 # 0x0303, the TLS 1.2 version uint16
      # certificates:
      #   - certificate_file: certs/cert.pem
      #     key_file:         certs/key.pem
identity:
  device_id: "mac:4ca161000109"
  serial_number: 1800deadbeef
  hardware_model: fooModel
  hardware_manufacturer: barManufacturer
  firmware_version: "v0.0.1"
  partner_id: foobar
xmidt_service:
  url: "https://localhost:4432"
  backoff:
    max_delay: 600s
    min_delay: 7s
# # config for an optional server that will redirect the device to a websocket server
# jwt_txt_redirector:
#   allowed_algorithms: ["RS256","EdDSA","ES256", "ES384", "ES512","PS256", "PS384", "PS512","RS256", "RS384", "RS512",]
#   # public jwt signing key(s)
#   pems:
#   - |
#     -----BEGIN PUBLIC KEY-----
#     MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkZeQUMqDkMu/dQgTcycJ
#     /rrgqfKQkoYFTMO7GnK87/OWiftHmtDJYPgktlcHheOPfkGln5ay1WJSitmtWNaH
#     +RvBFK/ZsXpIuGm7R6wdSc7e6g9fTaSAfNX/+a8VxHUo58AinXxcq4LnHbuaGjEz
#     jw77TLuZGyUuHiany8O8tc+DbnYKvRquScsccI6z/QwZKFtXUjJZ91hJ97zC8o7N
#     Ae7n/Jg+Bs0uz9c1/bf/Jqbu6OidFbCr2FN42UupuAZ8DiPp2fWD5Q9qmp1ADk+V
#     +TeZPxTCq/WB4dzSCd5v/FvFmO8tH6Ptkltij4pke7Dsi80TVRlcMDXAWxSFXOQV
#     qwIDAQAB
#     -----END PUBLIC KEY-----
#   timeout: 10s
websocket:
  url_path:           "/api/v2/device"
  # used if xmidt_service section is empty or xmdit_service connection fails
  back_up_url:        "https://localhost:8080"
  fetch_url_timeout:  30s
  inactivity_timeout:      1m
  ping_write_timeout:       90s
  send_timeout:       90s
  keep_alive_interval: 30s
  http_client:
    timeout: 30s
    transport:
      idle_conn_timeout:       10s
      tls_handshake_timeout:   10s
      expect_continue_timeout: 1s
    tls:
      insecure_skip_verify: true
  max_message_bytes: 262144 # 256 * 1024
quic:
  url_path:           "/api/v2/device"
  # used if xmidt_service section is empty or xmdit_service connection fails
  back_up_url:        "https://localhost:4432"
  fetch_url_timeout:  30s
  send_timeout:       90s
  quic_client:
    quic_config:
      keep_alive_period: 10s
      max_idle_timeout: 20s
      initial_stream_receive_window: 262144 # 256 * 1024
      max_stream_receive_window: 262144 # 256 * 1024
    tls_config:
      insecure_skip_verify: true
      next_protos:
        - h3
  #
  #	This retry policy gives us a very good approximation of the prior
  #	policy.  The important things about this policy are:
  #
  #	1. The backoff increases up to the max.
  #	2. There is jitter that spreads the load so windows do not overlap.
  #
  #	iteration | parodus   | this implementation
  #	----------+-----------+----------------
  #	0         | 0-1s      |   0.666 -  1.333
  #	1         | 1s-3s     |   1.333 -  2.666
  #	2         | 3s-7s     |   2.666 -  5.333
  #	3         | 7s-15s    |   5.333 -  10.666
  #	4         | 15s-31s   |  10.666 -  21.333
  #	5         | 31s-63s   |  21.333 -  42.666
  #	6         | 63s-127s  |  42.666 -  85.333
  #	7         | 127s-255s |  85.333 - 170.666
  #	8         | 255s-511s | 170.666 - 341.333
  #	9         | 255s-511s |           341.333
  #	n         | 255s-511s |           341.333
  #
  retry_policy:
    interval: 1s
    multiplier: 2.0
    jitter: .33333333 #1.0 / 3.0
    max_interval: 341333ms # 341*time.Second + 333*time.Millisecond
cloud:
  prefer_quic: true
  # max tries before switching protocols
  max_tries: 10
lib_parodus:
  parodus_service_url: "tcp://127.0.0.1:6666"
  keep_alive_interval: 30s
  receive_timeout:    1s
  send_timeout:       1s
pubsub:
  publish_timeout: 5s
logger:
  encoder_config:
    time_key:        T
    level_key:       L
    name_key:        N
    caller_key:      C
    function_key:    ""
    message_key:     M
    stacktrace_key:  S
    line_ending:     "\n"
    encode_level:    capital
    encode_time:     RFC3339Nano
    encode_duration: string
    encode_caller:   short
  rotation:
    max_size:    1  # 1MB max/file
    max_age:     30 # 30 days max
    max_backups: 10 # max 10 files
operational_state:
  last_reboot_reason: sleepy
  boot_time: "1970-01-01T00:00:00Z"
  webpa_interface_used: "erouter0"
storage:
  # temporary: "~/local-rdk-testing/temporary"
  # durable: "~/local-rdk-testing/durable"
mock_tr_181:
  enabled: false
  file_path: "mock_tr181.json"
  service_name: "mock_config"
xmidt_agent_crud:
  service_name: xmidt_agent
qos:
  max_queue_bytes:  104857600  # 100 * 1024 * 1024 // 100MB max/queue,
  priority: newest
metadata:
  # the identity metadata is sent via the convey header on connect.
  # optionally apply to every wrp message. temp workaround for home cloud.
  append_to_msg: false
  fields:
    - fw-name
    - hw-model
    - hw-manufacturer
    - hw-serial-number
    - hw-last-reboot-reason
    - webpa-protocol
    - boot-time
    - boot-time-retry-wait
    - webpa-interface-used
    - interfaces-available
# remove below section, not used or needed
network_service:
  allowed_interfaces:
    eth0:
      priority: 1
      enabled: true
    eth1:
      priority: 1
      enabled: true
    eth2:
      priority: 1
      enabled: true
    eth3:
      priority: 1
      enabled: true
    erouter0:
      priority: 2
      enabled: true
    eroutev0:
      priority: 2
      enabled: true
    wlan0:
      priority: 3
      enabled: true
    br-home:
      priority: 4
      enabled: true
    brrwan:
      priority: 5
      enabled: true
    vdsl0:
      priority: 6
      enabled: true
    wwan0:
      priority: 7
      enabled: true
    qmapmux0.127:
      priority: 8
      enabled: true
    cm0:
      priority: 9
      enabled: true
